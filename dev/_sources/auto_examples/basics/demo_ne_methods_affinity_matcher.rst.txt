
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/basics/demo_ne_methods_affinity_matcher.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_basics_demo_ne_methods_affinity_matcher.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_basics_demo_ne_methods_affinity_matcher.py:


Neighbor Embedding on genomics & equivalent affinity matcher formulation
=========================================================================

We illustrate the basic usage of TorchDR with different neighbor embedding methods
on the SNARE-seq gene expression dataset with given cell type labels.

.. GENERATED FROM PYTHON SOURCE LINES 9-15

.. code-block:: Python


    # Author: Titouan Vayer <titouan.vayer@inria.fr>
    #         Hugues Van Assel <vanasselhugues@gmail.com>
    #
    # License: BSD 3-Clause License








.. GENERATED FROM PYTHON SOURCE LINES 16-30

.. code-block:: Python

    import matplotlib.pyplot as plt

    from torchdr import (
        AffinityMatcher,
        SNE,
        UMAP,
        TSNE,
        EntropicAffinity,
        NormalizedGaussianAffinity,
    )
    import numpy as np
    import urllib.request









.. GENERATED FROM PYTHON SOURCE LINES 31-33

Load the SNARE-seq dataset (gene expression) with cell type labels
-------------------------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 33-50

.. code-block:: Python



    def load_numpy_from_url(url, delimiter="\t"):
        response = urllib.request.urlopen(url)
        data = response.read().decode("utf-8")
        data = data.split("\n")
        data = [row.split(delimiter) for row in data if row]
        numpy_array = np.array(data, dtype=float)
        return numpy_array


    url_x = "https://rsinghlab.github.io/SCOT/data/snare_rna.txt"
    X = load_numpy_from_url(url_x)

    url_y = "https://rsinghlab.github.io/SCOT/data/SNAREseq_types.txt"
    Y = load_numpy_from_url(url_y)








.. GENERATED FROM PYTHON SOURCE LINES 51-53

Run neighbor embedding methods
-------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 53-77

.. code-block:: Python


    params = {
        "optimizer": "Adam",
        "optimizer_kwargs": None,
        "max_iter": 100,
        "lr": 1e0,
    }

    sne = SNE(early_exaggeration=1, **params)

    umap = UMAP(early_exaggeration=1, **params)

    tsne = TSNE(early_exaggeration=1, **params)

    all_methods = {
        "TSNE": tsne,
        "SNE": sne,
        "UMAP": umap,
    }

    for method_name, method in all_methods.items():
        print("--- Computing {} ---".format(method_name))
        method.fit(X)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    --- Computing TSNE ---
    --- Computing SNE ---
    --- Computing UMAP ---




.. GENERATED FROM PYTHON SOURCE LINES 78-80

Plot the different embeddings
-----------------------------

.. GENERATED FROM PYTHON SOURCE LINES 80-92

.. code-block:: Python


    fig = plt.figure(figsize=(12, 4))

    for i, (method_name, method) in enumerate(all_methods.items()):
        ax = fig.add_subplot(1, 3, i + 1)
        emb = method.embedding_.detach().numpy()  # get the embedding
        ax.scatter(emb[:, 0], emb[:, 1], c=Y, s=10)
        ax.set_title("{0}".format(method_name), fontsize=24)
        ax.set_xticks([])
        ax.set_yticks([])
    plt.tight_layout()




.. image-sg:: /auto_examples/basics/images/sphx_glr_demo_ne_methods_affinity_matcher_001.png
   :alt: TSNE, SNE, UMAP
   :srcset: /auto_examples/basics/images/sphx_glr_demo_ne_methods_affinity_matcher_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 93-104

Using AffinityMatcher
-----------------------------

We can reproduce the same embeddings using the
class :class:`torchdr.AffinityMatcher`. The latter takes as input
two affinities and minimize a certain matching loss between them.

To reproduce the SNE algorithm
we can match, via the cross entropy loss,
a :class:`torchdr.EntropicAffinity` with a
:class:`torchdr.NormalizedGaussianAffinity`.

.. GENERATED FROM PYTHON SOURCE LINES 104-127

.. code-block:: Python


    sne_affinity_matcher = AffinityMatcher(
        n_components=2,
        # SNE matches an EntropicAffinity
        affinity_in=EntropicAffinity(sparsity=False),
        # with a Gaussian kernel normalized by row
        affinity_out=NormalizedGaussianAffinity(normalization_dim=1),
        loss_fn="cross_entropy_loss",  # and the cross_entropy loss
        **params,
    )
    sne_affinity_matcher.fit(X)

    fig = plt.figure(figsize=(8, 4))
    two_sne_dict = {"SNE": sne, "SNE (with affinity matcher)": sne_affinity_matcher}
    for i, (method_name, method) in enumerate(two_sne_dict.items()):
        ax = fig.add_subplot(1, 2, i + 1)
        emb = method.embedding_.detach().numpy()  # get the embedding
        ax.scatter(emb[:, 0], emb[:, 1], c=Y, s=10)
        ax.set_title("{0}".format(method_name), fontsize=15)
        ax.set_xticks([])
        ax.set_yticks([])
    plt.tight_layout()




.. image-sg:: /auto_examples/basics/images/sphx_glr_demo_ne_methods_affinity_matcher_002.png
   :alt: SNE, SNE (with affinity matcher)
   :srcset: /auto_examples/basics/images/sphx_glr_demo_ne_methods_affinity_matcher_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 128-138

On the efficiency of using the torchdr API rather than AffinityMatcher directly
-------------------------------------------------------------------------------

.. note::
    Calling :class:`torchdr.SNE` enables to leverage sparsity and therefore
    significantly reduces the computational cost of the algorithm compared to
    using :class:`torchdr.AffinityMatcher` with the corresponding affinities.
    In TorchDR, it is therefore recommended to use the specific class associated
    with the desired algorithm when available.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 40.169 seconds)


.. _sphx_glr_download_auto_examples_basics_demo_ne_methods_affinity_matcher.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: demo_ne_methods_affinity_matcher.ipynb <demo_ne_methods_affinity_matcher.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: demo_ne_methods_affinity_matcher.py <demo_ne_methods_affinity_matcher.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: demo_ne_methods_affinity_matcher.zip <demo_ne_methods_affinity_matcher.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
