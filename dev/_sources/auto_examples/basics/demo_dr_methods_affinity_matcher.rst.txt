
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/basics/demo_dr_methods_affinity_matcher.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_basics_demo_dr_methods_affinity_matcher.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_basics_demo_dr_methods_affinity_matcher.py:


Comparison of different DR methods and the use of affinity matcher
==================================================================

We illustrate the basic usage of TorchDR with different DR methods
on the swiss roll dataset.

.. GENERATED FROM PYTHON SOURCE LINES 10-18

.. code-block:: Python

    import torch
    import matplotlib.pyplot as plt
    from sklearn.datasets import make_swiss_roll

    from torchdr import AffinityMatcher, SNE, UMAP, TSNE
    from torchdr.affinity import EntropicAffinity, NormalizedGaussianAffinity









.. GENERATED FROM PYTHON SOURCE LINES 19-23

Load toy images
---------------

First, let's load 5 classes of the digits dataset from sklearn.

.. GENERATED FROM PYTHON SOURCE LINES 23-29

.. code-block:: Python

    torch.manual_seed(0)
    n_samples = 500
    X, t = make_swiss_roll(n_samples=n_samples, noise=0.1, random_state=0)

    init_embedding = torch.normal(0, 1, size=(
                    n_samples, 2), dtype=torch.double)







.. GENERATED FROM PYTHON SOURCE LINES 30-34

Compute the different embedding
-------------------------------

Tune the different hyperparameters for better results.

.. GENERATED FROM PYTHON SOURCE LINES 34-67

.. code-block:: Python

    perplexity = 30
    lr = 1e-1
    optim_params = {
        'init': init_embedding,
        'early_exaggeration_iter': 0,
        'optimizer': 'Adam',
        'optimizer_kwargs': None,
        'early_exaggeration': 1.0,
        'max_iter': 100
        }

    sne = SNE(n_components=2,
              perplexity=perplexity,
              lr=lr, **optim_params)

    umap = UMAP(n_neighbors=perplexity,
                n_components=2,
                lr=lr, **optim_params)

    tsne = TSNE(n_components=2,
                perplexity=perplexity,
                lr=lr, **optim_params)

    all_methods = {
        'TSNE': tsne,
        'SNE': sne,
        'UMAP': umap,
    }

    for method_name, method in all_methods.items():
        print('--- Computing {} ---'.format(method_name))
        method.fit(X)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    --- Computing TSNE ---
    --- Computing SNE ---
    --- Computing UMAP ---
    [TorchDR] Affinity : sparsity mode enabled, computing nearest neighbors.




.. GENERATED FROM PYTHON SOURCE LINES 68-70

Plot the different embeddings
-----------------------------

.. GENERATED FROM PYTHON SOURCE LINES 70-85

.. code-block:: Python

    fig = plt.figure(figsize=(15, 4))
    fs = 24
    ax = fig.add_subplot(1, 4, 1, projection='3d')
    ax.scatter(X[:, 0], X[:, 1], X[:, 2], c=t, s=20)
    ax.set_title('Swiss Roll in ambient space', font='Times New Roman', fontsize=fs)
    ax.view_init(azim=-66, elev=12)

    for i, (method_name, method) in enumerate(all_methods.items()):
        ax = fig.add_subplot(1, 4, i+2)
        emb = method.embedding_.detach().numpy()  # get the embedding
        ax.scatter(emb[:, 0], emb[:, 1], c=t, s=20)
        ax.set_title('{0}'.format(method_name), font='Times New Roman', fontsize=fs)
        ax.set_xticks([])
        ax.set_yticks([])
    plt.tight_layout()



.. image-sg:: /auto_examples/basics/images/sphx_glr_demo_dr_methods_affinity_matcher_001.png
   :alt: Swiss Roll in ambient space, TSNE, SNE, UMAP
   :srcset: /auto_examples/basics/images/sphx_glr_demo_dr_methods_affinity_matcher_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    findfont: Font family 'Times New Roman' not found.
    findfont: Font family 'Times New Roman' not found.
    findfont: Font family 'Times New Roman' not found.
    findfont: Font family 'Times New Roman' not found.
    findfont: Font family 'Times New Roman' not found.




.. GENERATED FROM PYTHON SOURCE LINES 86-99

Using AffinityMatcher
-----------------------------

We can reproduce the same kind of results using the
flexible class AffinityMatcher
:class:`torchdr.AffinityMatcher`. It take as input
two affinities and minimize a certain matching loss
between them. To reproduce the SNE algorithm
we can match with the cross entropy loss
an EntropicAffinity
:class:`torchdr.affinity.EntropicAffinity` with given
perplexity and a NormalizedGaussianAffinity
:class:`torchdr.affinity.NormalizedGaussianAffinity`.

.. GENERATED FROM PYTHON SOURCE LINES 99-124

.. code-block:: Python


    sne_affinity_matcher = AffinityMatcher(
        n_components=2,
        # SNE matches an EntropicAffinity
        affinity_in=EntropicAffinity(perplexity=perplexity),
        # with a Gaussian kernel normalized by row
        affinity_out=NormalizedGaussianAffinity(normalization_dim=1),
        loss_fn="cross_entropy_loss",  # and the cross_entropy loss
        init=init_embedding,
        max_iter=200,
        lr=lr
    )
    sne_affinity_matcher.fit(X)

    fig = plt.figure(figsize=(10, 4))
    fs = 24
    two_sne_dict = {'SNE': sne, 'SNE (with affinity matcher)': sne_affinity_matcher}
    for i, (method_name, method) in enumerate(two_sne_dict.items()):
        ax = fig.add_subplot(1, 2, i+1)
        emb = method.embedding_.detach().numpy()  # get the embedding
        ax.scatter(emb[:, 0], emb[:, 1], c=t, s=20)
        ax.set_title('{0}'.format(method_name), font='Times New Roman', fontsize=fs)
        ax.set_xticks([])
        ax.set_yticks([])
    plt.tight_layout()



.. image-sg:: /auto_examples/basics/images/sphx_glr_demo_dr_methods_affinity_matcher_002.png
   :alt: SNE, SNE (with affinity matcher)
   :srcset: /auto_examples/basics/images/sphx_glr_demo_dr_methods_affinity_matcher_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/circleci/project/torchdr/affinity_matcher.py:163: UserWarning: [TorchDR] WARNING : affinity_out must be a UnnormalizedAffinity when affinity_in is sparse. Setting sparsity = False in affinity_in.
      warnings.warn(
    findfont: Font family 'Times New Roman' not found.
    findfont: Font family 'Times New Roman' not found.
    findfont: Font family 'Times New Roman' not found.





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 1.180 seconds)


.. _sphx_glr_download_auto_examples_basics_demo_dr_methods_affinity_matcher.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: demo_dr_methods_affinity_matcher.ipynb <demo_dr_methods_affinity_matcher.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: demo_dr_methods_affinity_matcher.py <demo_dr_methods_affinity_matcher.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
