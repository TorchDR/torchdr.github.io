
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/basics/demo_pca_via_affinity_matcher.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_basics_demo_pca_via_affinity_matcher.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_basics_demo_pca_via_affinity_matcher.py:


PCA via SVD and via AffinityMatcher
===================================

We show how to compute a PCA embedding using the closed form
and using the AffinityMatcher class. Both approaches lead to the same solution.

.. GENERATED FROM PYTHON SOURCE LINES 9-16

.. code-block:: Python


    import matplotlib.pyplot as plt
    from sklearn.datasets import load_digits

    from torchdr.spectral import PCA
    from torchdr import AffinityMatcher, ScalarProductAffinity








.. GENERATED FROM PYTHON SOURCE LINES 17-21

Load toy images
---------------

First, let's load 5 classes of the digits dataset from sklearn.

.. GENERATED FROM PYTHON SOURCE LINES 21-25

.. code-block:: Python


    digits = load_digits(n_class=5)
    X = digits.data








.. GENERATED FROM PYTHON SOURCE LINES 26-32

PCA via SVD
-----------

Let us perform PCA using the closed form solution given by the
Singular Value Decomposition (SVD).
In ``Torchdr``, it is available at :class:`torchdr.PCA`.

.. GENERATED FROM PYTHON SOURCE LINES 32-41

.. code-block:: Python


    Z_svd = PCA(n_components=2).fit_transform(X)

    plt.figure()
    plt.scatter(Z_svd[:, 0], Z_svd[:, 1], c=digits.target)
    plt.title("PCA via SVD")
    plt.show()





.. image-sg:: /auto_examples/basics/images/sphx_glr_demo_pca_via_affinity_matcher_001.png
   :alt: PCA via SVD
   :srcset: /auto_examples/basics/images/sphx_glr_demo_pca_via_affinity_matcher_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 42-51

PCA via AffinityMatcher
-----------------------

Now, let us perform PCA using the AffinityMatcher class
:class:`torchdr.AffinityMatcher`
as well as the scalar product affinity
:class:`torchdr.ScalarProductAffinity`
for both input data and embeddings,
and the square loss as global objective.

.. GENERATED FROM PYTHON SOURCE LINES 51-70

.. code-block:: Python


    model = AffinityMatcher(
        n_components=2,
        affinity_in=ScalarProductAffinity(centering=True),
        affinity_out=ScalarProductAffinity(),
        loss_fn="square_loss",
        init="normal",
        lr=1e1,
        max_iter=50,
        keops=False,
    )
    Z_am = model.fit_transform(X)

    plt.figure()
    plt.scatter(Z_am[:, 0], Z_am[:, 1], c=digits.target)
    plt.title("PCA via AffinityMatcher")
    plt.show()





.. image-sg:: /auto_examples/basics/images/sphx_glr_demo_pca_via_affinity_matcher_002.png
   :alt: PCA via AffinityMatcher
   :srcset: /auto_examples/basics/images/sphx_glr_demo_pca_via_affinity_matcher_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/50 [00:00<?, ?it/s]    Loss : 1.35e+11:   0%|          | 0/50 [00:00<?, ?it/s]    Loss : 9.42e+10:   0%|          | 0/50 [00:00<?, ?it/s]    Loss : 9.86e+10:   0%|          | 0/50 [00:00<?, ?it/s]    Loss : 9.86e+10:   6%|▌         | 3/50 [00:00<00:02, 18.49it/s]    Loss : 7.49e+10:   6%|▌         | 3/50 [00:00<00:02, 18.49it/s]    Loss : 7.28e+10:   6%|▌         | 3/50 [00:00<00:02, 18.49it/s]    Loss : 7.28e+10:  10%|█         | 5/50 [00:00<00:03, 13.12it/s]    Loss : 6.51e+10:  10%|█         | 5/50 [00:00<00:03, 13.12it/s]    Loss : 5.72e+10:  10%|█         | 5/50 [00:00<00:03, 13.12it/s]    Loss : 5.72e+10:  14%|█▍        | 7/50 [00:00<00:03, 11.62it/s]    Loss : 5.15e+10:  14%|█▍        | 7/50 [00:00<00:03, 11.62it/s]    Loss : 4.53e+10:  14%|█▍        | 7/50 [00:00<00:03, 11.62it/s]    Loss : 4.53e+10:  18%|█▊        | 9/50 [00:00<00:03, 11.01it/s]    Loss : 4.40e+10:  18%|█▊        | 9/50 [00:00<00:03, 11.01it/s]    Loss : 4.58e+10:  18%|█▊        | 9/50 [00:00<00:03, 11.01it/s]    Loss : 4.58e+10:  22%|██▏       | 11/50 [00:00<00:03, 10.64it/s]    Loss : 4.63e+10:  22%|██▏       | 11/50 [00:01<00:03, 10.64it/s]    Loss : 4.49e+10:  22%|██▏       | 11/50 [00:01<00:03, 10.64it/s]    Loss : 4.49e+10:  26%|██▌       | 13/50 [00:01<00:03, 10.38it/s]    Loss : 4.26e+10:  26%|██▌       | 13/50 [00:01<00:03, 10.38it/s]    Loss : 4.10e+10:  26%|██▌       | 13/50 [00:01<00:03, 10.38it/s]    Loss : 4.10e+10:  30%|███       | 15/50 [00:01<00:03, 10.27it/s]    Loss : 4.04e+10:  30%|███       | 15/50 [00:01<00:03, 10.27it/s]    Loss : 4.00e+10:  30%|███       | 15/50 [00:01<00:03, 10.27it/s]    Loss : 4.00e+10:  34%|███▍      | 17/50 [00:01<00:03, 10.18it/s]    Loss : 3.93e+10:  34%|███▍      | 17/50 [00:01<00:03, 10.18it/s]    Loss : 3.87e+10:  34%|███▍      | 17/50 [00:01<00:03, 10.18it/s]    Loss : 3.87e+10:  38%|███▊      | 19/50 [00:01<00:03, 10.14it/s]    Loss : 3.82e+10:  38%|███▊      | 19/50 [00:01<00:03, 10.14it/s]    Loss : 3.75e+10:  38%|███▊      | 19/50 [00:01<00:03, 10.14it/s]    Loss : 3.75e+10:  42%|████▏     | 21/50 [00:01<00:02, 10.10it/s]    Loss : 3.66e+10:  42%|████▏     | 21/50 [00:02<00:02, 10.10it/s]    Loss : 3.59e+10:  42%|████▏     | 21/50 [00:02<00:02, 10.10it/s]    Loss : 3.59e+10:  46%|████▌     | 23/50 [00:02<00:02, 10.08it/s]    Loss : 3.58e+10:  46%|████▌     | 23/50 [00:02<00:02, 10.08it/s]    Loss : 3.59e+10:  46%|████▌     | 23/50 [00:02<00:02, 10.08it/s]    Loss : 3.59e+10:  50%|█████     | 25/50 [00:02<00:02, 11.84it/s]    Loss : 3.58e+10:  50%|█████     | 25/50 [00:02<00:02, 11.84it/s]    Loss : 3.56e+10:  50%|█████     | 25/50 [00:02<00:02, 11.84it/s]    Loss : 3.56e+10:  54%|█████▍    | 27/50 [00:02<00:02, 11.23it/s]    Loss : 3.54e+10:  54%|█████▍    | 27/50 [00:02<00:02, 11.23it/s]    Loss : 3.51e+10:  54%|█████▍    | 27/50 [00:02<00:02, 11.23it/s]    Loss : 3.51e+10:  58%|█████▊    | 29/50 [00:02<00:01, 10.84it/s]    Loss : 3.48e+10:  58%|█████▊    | 29/50 [00:02<00:01, 10.84it/s]    Loss : 3.44e+10:  58%|█████▊    | 29/50 [00:02<00:01, 10.84it/s]    Loss : 3.44e+10:  62%|██████▏   | 31/50 [00:02<00:01, 10.52it/s]    Loss : 3.42e+10:  62%|██████▏   | 31/50 [00:02<00:01, 10.52it/s]    Loss : 3.40e+10:  62%|██████▏   | 31/50 [00:03<00:01, 10.52it/s]    Loss : 3.40e+10:  66%|██████▌   | 33/50 [00:03<00:01, 10.37it/s]    Loss : 3.40e+10:  66%|██████▌   | 33/50 [00:03<00:01, 10.37it/s]    Loss : 3.40e+10:  66%|██████▌   | 33/50 [00:03<00:01, 10.37it/s]    Loss : 3.40e+10:  70%|███████   | 35/50 [00:03<00:01, 10.28it/s]    Loss : 3.40e+10:  70%|███████   | 35/50 [00:03<00:01, 10.28it/s]    Loss : 3.40e+10:  70%|███████   | 35/50 [00:03<00:01, 10.28it/s]    Loss : 3.40e+10:  74%|███████▍  | 37/50 [00:03<00:01, 10.17it/s]    Loss : 3.39e+10:  74%|███████▍  | 37/50 [00:03<00:01, 10.17it/s]    Loss : 3.37e+10:  74%|███████▍  | 37/50 [00:03<00:01, 10.17it/s]    Loss : 3.37e+10:  78%|███████▊  | 39/50 [00:03<00:01,  8.82it/s]    Loss : 3.35e+10:  78%|███████▊  | 39/50 [00:03<00:01,  8.82it/s]    Loss : 3.35e+10:  78%|███████▊  | 39/50 [00:03<00:01,  8.82it/s]    Loss : 3.35e+10:  82%|████████▏ | 41/50 [00:03<00:00, 10.55it/s]    Loss : 3.34e+10:  82%|████████▏ | 41/50 [00:03<00:00, 10.55it/s]    Loss : 3.34e+10:  82%|████████▏ | 41/50 [00:03<00:00, 10.55it/s]    Loss : 3.34e+10:  86%|████████▌ | 43/50 [00:03<00:00, 12.22it/s]    Loss : 3.33e+10:  86%|████████▌ | 43/50 [00:04<00:00, 12.22it/s]    Loss : 3.33e+10:  86%|████████▌ | 43/50 [00:04<00:00, 12.22it/s]    Loss : 3.33e+10:  90%|█████████ | 45/50 [00:04<00:00,  9.86it/s]    Loss : 3.33e+10:  90%|█████████ | 45/50 [00:04<00:00,  9.86it/s]    Loss : 3.33e+10:  90%|█████████ | 45/50 [00:04<00:00,  9.86it/s]    Loss : 3.33e+10:  94%|█████████▍| 47/50 [00:04<00:00, 11.56it/s]    Loss : 3.32e+10:  94%|█████████▍| 47/50 [00:04<00:00, 11.56it/s]    Loss : 3.32e+10:  94%|█████████▍| 47/50 [00:04<00:00, 11.56it/s]    Loss : 3.32e+10:  98%|█████████▊| 49/50 [00:04<00:00, 11.07it/s]    Loss : 3.32e+10:  98%|█████████▊| 49/50 [00:04<00:00, 11.07it/s]    Loss : 3.32e+10: 100%|██████████| 50/50 [00:04<00:00, 10.73it/s]




.. GENERATED FROM PYTHON SOURCE LINES 71-73

We can see that we obtain the same PCA embedding (up to a rotation) using
both methods.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 6.068 seconds)


.. _sphx_glr_download_auto_examples_basics_demo_pca_via_affinity_matcher.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: demo_pca_via_affinity_matcher.ipynb <demo_pca_via_affinity_matcher.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: demo_pca_via_affinity_matcher.py <demo_pca_via_affinity_matcher.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
